# Generated by Django 2.1.5 on 2019-03-29 06:29

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Host',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hostname', models.CharField(max_length=64, unique=True)),
                ('ip_address', models.GenericIPAddressField(unique=True)),
                ('monitor_type', models.CharField(choices=[('snmp', 'SNMP'), ('agent', 'Agent'), ('wget', 'WGET')], max_length=64, verbose_name='监控方式')),
                ('status', models.IntegerField(choices=[(0, 'Offline'), (1, 'Online'), (2, 'Error'), (3, 'Down'), (4, 'Unreachable')], default=0, verbose_name='状态')),
                ('desc', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('host_alive_check_interval', models.IntegerField(default=30, verbose_name='检查主机存活间隔')),
            ],
        ),
        migrations.CreateModel(
            name='HostGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_name', models.CharField(max_length=64, unique=True)),
                ('memo', models.TextField(blank=True, null=True, verbose_name='备注')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceIndex',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index_name', models.CharField(max_length=64, unique=True)),
                ('real_key', models.CharField(max_length=64)),
                ('data_type', models.PositiveIntegerField(choices=[('int', 'int'), ('str', 'str'), ('float', 'float')], default=0, verbose_name='数据指标类型')),
            ],
        ),
        migrations.CreateModel(
            name='Services',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_name', models.CharField(max_length=64)),
                ('interval', models.PositiveIntegerField(default=60, verbose_name='监控间隔')),
                ('plugin_name', models.CharField(max_length=64, verbose_name='插件名')),
                ('sub_items', models.BooleanField(default=False, help_text='如果一个服务还有独立的子服务，选择这个')),
                ('memo', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('indexs', models.ManyToManyField(blank=True, to='monitor.ServiceIndex', verbose_name='指标列表')),
            ],
        ),
        migrations.CreateModel(
            name='Template',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('template_name', models.CharField(max_length=64, unique=True)),
                ('service', models.ManyToManyField(blank=True, to='monitor.Services')),
            ],
        ),
        migrations.CreateModel(
            name='Userprofile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(blank=True, max_length=64, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='hostgroup',
            name='templates',
            field=models.ManyToManyField(blank=True, to='monitor.Template'),
        ),
        migrations.AddField(
            model_name='host',
            name='host_groups',
            field=models.ManyToManyField(blank=True, to='monitor.HostGroup'),
        ),
        migrations.AddField(
            model_name='host',
            name='templates',
            field=models.ManyToManyField(blank=True, to='monitor.Template'),
        ),
    ]
